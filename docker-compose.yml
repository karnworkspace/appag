version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: taskmanager-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-devpass123}
      MONGO_INITDB_DATABASE: taskmanager
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - taskmanager-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      target: development
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-devpass123}@mongodb:27017/taskmanager?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-devsecret123}
      SESSION_SECRET: ${SESSION_SECRET:-devsession123}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:5000/auth/google/callback}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "5000:5000"
      - "9229:9229"  # Node.js debugger port
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - taskmanager-network
    command: npm run dev

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      target: development
    container_name: taskmanager-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000}
      REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      CHOKIDAR_USEPOLLING: true  # Important for WSL2 hot-reload
      WATCHPACK_POLLING: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - taskmanager-network
    stdin_open: true
    tty: true
    command: npm start

  # Nginx Reverse Proxy (Optional for production-like setup)
  # nginx:
  #   image: nginx:alpine
  #   container_name: taskmanager-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - taskmanager-network

networks:
  taskmanager-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
